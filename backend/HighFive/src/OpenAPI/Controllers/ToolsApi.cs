/*
 * High Five
 *
 * The OpenAPI specification for High Five's controllers
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ToolsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Approve Tool use case</remarks>
        /// <param name="reviewToolRequest"></param>
        /// <response code="200">Tool has been approved by and admin and uploaded</response>
        [HttpPost]
        [Route("/tools/approveTool")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EmptyObject))]
        public abstract IActionResult ApproveTool([FromBody]ReviewToolRequest reviewToolRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Create Meta Data Type use case</remarks>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <response code="200">All tool types have been returned</response>
        [HttpPost]
        [Route("/tools/createMetaDataType")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EmptyObject))]
        public abstract IActionResult CreateMetaDataType([FromForm (Name = "name")]string name, IFormFile file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Delete Tool use case</remarks>
        /// <param name="deleteToolRequest"></param>
        /// <response code="200">The Tool has been deleted</response>
        [HttpPost]
        [Route("/tools/deleteTool")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EmptyObject))]
        public abstract IActionResult DeleteTool([FromBody]DeleteToolRequest deleteToolRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Get Meta Data Types use case</remarks>
        /// <response code="200">Returns all meta data types</response>
        [HttpGet]
        [Route("/tools/getMetaDataTypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetToolMetaDataTypes))]
        public abstract IActionResult GetMetaDataTypes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Get Tool Files use case</remarks>
        /// <param name="getToolFilesRequest"></param>
        /// <response code="200">All tool types have been returned</response>
        [HttpPost]
        [Route("/tools/getToolFiles")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetToolFilesResponse))]
        public abstract IActionResult GetToolFiles([FromBody]GetToolFilesRequest getToolFilesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Get Tool Types use case</remarks>
        /// <response code="200">All tool types have been returned</response>
        [HttpGet]
        [Route("/tools/getToolTypes")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetToolTypesResponse))]
        public abstract IActionResult GetToolTypes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Delete Tool use case</remarks>
        /// <response code="200">All tools have been returned</response>
        [HttpGet]
        [Route("/tools/getAllTools")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetAllToolsResponse))]
        public abstract IActionResult GetTools();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Get Unreviewed Tools use case</remarks>
        /// <response code="200">Returns all tools that has yet to be reviewed</response>
        [HttpGet]
        [Route("/tools/getUnreviewedTools")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(GetUnreviewedToolsResponse))]
        public abstract IActionResult GetUnreviewedTools();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Reject Tool use case</remarks>
        /// <param name="reviewToolRequest"></param>
        /// <response code="200">Tool has been rejected by and admin and removed from storage</response>
        [HttpPost]
        [Route("/tools/rejectTool")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(EmptyObject))]
        public abstract IActionResult RejectTool([FromBody]ReviewToolRequest reviewToolRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Upload Analysis Tool use case</remarks>
        /// <param name="sourceCode"></param>
        /// <param name="model"></param>
        /// <param name="metadataType"></param>
        /// <param name="toolName"></param>
        /// <response code="200">The Analysis Tool has been uploaded</response>
        [HttpPost]
        [Route("/tools/uploadAnalysisTool")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Tool))]
        public abstract IActionResult UploadAnalysisTool(IFormFile sourceCode, IFormFile model, [FromForm (Name = "metadataType")]string metadataType, [FromForm (Name = "toolName")]string toolName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Endpoint for Upload Drawing Tool use case</remarks>
        /// <param name="sourceCode"></param>
        /// <param name="metadataType"></param>
        /// <param name="toolName"></param>
        /// <response code="200">The Drawing Tool has been uploaded</response>
        [HttpPost]
        [Route("/tools/uploadDrawingTool")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Tool))]
        public abstract IActionResult UploadDrawingTool(IFormFile sourceCode, [FromForm (Name = "metadataType")]string metadataType, [FromForm (Name = "toolName")]string toolName);
    }
}
