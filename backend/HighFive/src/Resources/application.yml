openapi: 3.0.0

info:
  version: 0.0.1
  title: High Five
  description: The OpenAPI specification for High Five's controllers

tags:
  - name: "MediaStorage"
  - name: "Test"
  - name: "Pipelines"
  - name: "Analysis"
  - name: "User"
  - name: "Tools"
  - name: "Downloads"
  - name: "Livestream"

  #==========================================================
  #     PATHS
  #==========================================================
paths:

  #==========================================================
  #     TEST SUBSYSTEM PATHING
  #==========================================================

  /test/ping:
    post:
      tags:
        - "Test"
      description: Test if the server is online
      operationId: Ping
      responses:
        "200":
          description: Ping successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pingResponse'

  /test/echo:
    post:
      tags:
        - "Test"
      description: Test if the server is online
      operationId: Echo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/echoRequest'
      responses:
        "200":
          description: Ping successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pingResponse'

  #==========================================================
  #     MEDIA STORAGE SUBSYSTEM PATHING
  #==========================================================

  /media/storeVideo:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Store Video use case
      operationId: StoreVideo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/storeVideoRequest'
      responses:
        "200":
          description: Video has been stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/videoMetaData'

  /media/getAllVideos:
    get:
      tags:
        - "MediaStorage"
      description: Endpoint for Get All Videos use case
      operationId: GetAllVideos
      responses:
        "200":
          description: Returns a list of metadata objects of all the videos in the blob storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllVideosResponse'

  /media/deleteVideo:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Delete Video use case
      operationId: DeleteVideo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteVideoRequest'
      responses:
        "200":
          description: Video successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /media/storeImage:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Store Image use case
      operationId: StoreImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/storeImageRequest'
      responses:
        "200":
          description: Image has been stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imageMetaData'

  /media/getAllImages:
    get:
      tags:
        - "MediaStorage"
      description: Endpoint for Get All Images use case
      operationId: GetAllImages
      responses:
        "200":
          description: Returns a list of images in the blob storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllImagesResponse'

  /media/deleteImage:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Delete Image use case
      operationId: DeleteImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteImageRequest'
      responses:
        "200":
          description: Image successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /media/getAnalyzedImages:
    get:
      tags:
        - "MediaStorage"
      description: Endpoint for Get Analyzed Images use case
      operationId: GetAnalyzedImages
      responses:
        "200":
          description: All previously analyzed images are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAnalyzedImagesResponse'

  /media/getAnalyzedVideos:
    get:
      tags:
        - "MediaStorage"
      description: Endpoint for Get Analyzed Videos use case
      operationId: GetAnalyzedVideos
      responses:
        "200":
          description: All previously analyzed videos are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAnalyzedVideosResponse'

  /media/deleteAnalyzedImage:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Delete Analyzed Image use case
      operationId: DeleteAnalyzedImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteImageRequest'
      responses:
        "200":
          description: Deletes analyzed image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /media/deleteAnalyzedVideo:
    post:
      tags:
        - "MediaStorage"
      description: Endpoint for Delete Analyzed Video use case
      operationId: DeleteAnalyzedVideo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteVideoRequest'
      responses:
        "200":
          description: Deletes analyzed video
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'
  #==========================================================
  #     PIPELINES SUBSYSTEM PATHING
  #==========================================================

  /pipelines/createPipeline:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Create Pipeline use case
      operationId: CreatePipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPipelineRequest'
      responses:
        "200":
          description: Pipeline has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPipelineResponse'

  /pipelines/getPipelines:
    get:
      tags:
        - "Pipelines"
      description: Endpoint for Get Pipelines use case
      operationId: GetPipelines
      responses:
        "200":
          description: All pipelines have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPipelinesResponse'

  /pipelines/getPipelineIds:
    get:
      tags:
        - "Pipelines"
      description: Endpoint for Get Pipeline Ids use case
      operationId: GetPipelineIds
      responses:
        "200":
          description: All pipeline Id's have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPipelineIdsResponse'

  /pipelines/getPipeline:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Get Pipeline use case
      operationId: GetPipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getPipelineRequest'
      responses:
        "200":
          description: Returns a pipeline for a given Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline'

  /pipelines/addTools:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Add Tools use case
      operationId: AddTools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addToolsRequest'
      responses:
        "200":
          description: Tools have been added to pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /pipelines/removeTools:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Remove Tools use case
      operationId: RemoveTools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeToolsRequest'
      responses:
        "200":
          description: Tools have been removed from pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /pipelines/deletePipeline:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Delete Pipeline use case
      operationId: DeletePipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deletePipelineRequest'
      responses:
        "200":
          description: Tools have been removed from pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'
                
  /pipelines/setLivePipeline:
    post:
      tags:
        - "Pipelines"
      description: Endpoint for Set Live Pipeline use case
      operationId: SetLivePipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getPipelineRequest'
      responses:
        "200":
          description: Tools have been removed from pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /pipelines/getAllTools:
    get:
      tags:
        - "Pipelines"
      description: Endpoint for Get All Tools use case
      operationId: GetAllTools
      responses:
        "200":
          description: All existing tools have been returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string


  /pipelines/getLivePipeline:
    get:
      tags:
        - "Pipelines"
      description: Endpoint for Get Live Pipeline use case
      operationId: GetLivePipeline
      responses:
        "200":
          description: Returns current live pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline'

  #==========================================================
  #     ANALYSIS SUBSYSTEM PATHING
  #==========================================================

  /analysis/analyzeImage:
    post:
      tags:
        - "Analysis"
      description: Endpoint for Analyze Image use case
      operationId: AnalyzeImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyzeImageRequest'
      responses:
        "200":
          description: A url of the analyzed media is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyzedImageMetaData'

  /analysis/analyzeVideo:
    post:
      tags:
        - "Analysis"
      description: Endpoint for Analyze Video use case
      operationId: AnalyzeVideo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analyzeVideoRequest'
      responses:
        "200":
          description: A url of the analyzed media is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analyzedVideoMetaData'

  #==========================================================
  #     USER SUBSYSTEM PATHING
  #==========================================================

  /users/getAllUsers:
    get:
      tags:
        - "User"
      description: Endpoint for Get All Users use case
      operationId: Get All Users
      responses:
        "200":
          description: All users are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllUsersResponse'

  /users/deleteMedia:
    post:
      tags:
        - "User"
      description: Endpoint for Delete Media use case
      operationId: DeleteMedia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
      responses:
        "200":
          description: Called by an admin to delete all the media of another user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /users/deleteOwnMedia:
    post:
      tags:
        - "User"
      description: Endpoint for Delete Own Media use case
      operationId: DeleteOwnMedia
      responses:
        "200":
          description: Called by a user to delete all of their own media
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /users/upgradeToAdmin:
    post:
      tags:
        - "User"
      description: Endpoint for Upgrade To Admin use case
      operationId: UpgradeToAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
      responses:
        "200":
          description: Called by an admin to upgrade a normal use to an administrator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /users/isAdmin:
    get:
      tags:
        - "User"
      description: Endpoint for Is Admin use case
      operationId: IsAdmin
      responses:
        "200":
          description: Used to verify whether the currently logged in user is an admin or not
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isAdminResponse'

  /users/revokeAdmin:
    post:
      tags:
        - "User"
      description: Endpoint for Revoke Admin use case
      operationId: RevokeAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
      responses:
        "200":
          description: Used to remove admin rights from an existing admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isAdminResponse'

  #==========================================================
  #     TOOL SUBSYSTEM PATHING
  #==========================================================

  /tools/uploadAnalysisTool:
    post:
      tags:
        - "Tools"
      description: Endpoint for Upload Analysis Tool use case
      operationId: UploadAnalysisTool
      requestBody:
        required: true
        description: Receives .cs source code and model for analysis tool.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/storeAnalysisToolRequest'
      responses:
        "200":
          description: The Analysis Tool has been uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tool'

  /tools/uploadDrawingTool:
    post:
      tags:
        - "Tools"
      description: Endpoint for Upload Drawing Tool use case
      operationId: UploadDrawingTool
      requestBody:
        required: true
        description: Receives .cs source code for drawing.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/storeDrawingToolRequest'
      responses:
        "200":
          description: The Drawing Tool has been uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tool'

  /tools/deleteTool:
    post:
      tags:
        - "Tools"
      description: Endpoint for Delete Tool use case
      operationId: DeleteTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteToolRequest'
      responses:
        "200":
          description: The Tool has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /tools/getAllTools:
    get:
      tags:
        - "Tools"
      description: Endpoint for Delete Tool use case
      operationId: GetTools
      responses:
        "200":
          description: All tools have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllToolsResponse'

  /tools/getToolTypes:
    get:
      tags:
        - "Tools"
      description: Endpoint for Get Tool Types use case
      operationId: GetToolTypes
      responses:
        "200":
          description: All tool types have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getToolTypesResponse'

  /tools/createMetaDataType:
    post:
      tags:
        - "Tools"
      description: Endpoint for Create Meta Data Type use case
      operationId: CreateMetaDataType
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createToolMetaDataTypeRequest'
      responses:
        "200":
          description: All tool types have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /tools/getMetaDataTypes:
    get:
      tags:
        - "Tools"
      description: Endpoint for Get Meta Data Types use case
      operationId: GetMetaDataTypes
      responses:
        "200":
          description: Returns all meta data types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getToolMetaDataTypes'

  /tools/getToolFiles:
    post:
      tags:
        - "Tools"
      description: Endpoint for Get Tool Files use case
      operationId: GetToolFiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getToolFilesRequest'
      responses:
        "200":
          description: All tool types have been returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getToolFilesResponse'

  #==========================================================
  #     DOWNLOADS SUBSYSTEM PATHING
  #==========================================================

  /tools/downloadApk:
    get:
      tags:
        - "Downloads"
      description: Endpoint to download the mobile app's apk
      operationId: DownloadApk
      responses:
        "200":
          description: Returns an apk to install the mobile application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileDownload'

  /tools/downloadSdkManual:
    get:
      tags:
        - "Downloads"
      description: Endpoint to download the sdk's user manual
      operationId: DownloadSdkManual
      responses:
        "200":
          description: Returns the sdk user manual
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileDownload'

  /tools/downloadSdkFiles:
    get:
      tags:
        - "Downloads"
      description: Endpoint to download the sdk's required files
      operationId: DownloadSdkFiles
      responses:
        "200":
          description: Returns the sdk required files as .cs files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/downloadSdkFilesResponse'

  #==========================================================
  #     LIVESTREAM SUBSYSTEM PATHING
  #==========================================================

  /livestream/createOneTimeToken:
    post:
      tags:
        - "Livestream"
      description: Endpoint for Create One Time Token use case
      operationId: CreateOneTimeToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOneTimeTokenRequest'
      responses:
        "200":
          description: Returns random one time token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'

  /livestream/returnAllLivestreams:
    get:
      tags:
        - "Livestream"
      description: Endpoint for Return All Livestreams use case
      operationId: ReturnAllLiveStreams
      responses:
        "200":
          description: Returns all livestream id's
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyObject'
  
  #==========================================================
  #     SCHEMAS
  #==========================================================
components:
  schemas:

    #==========================================================
    #     TEST COMPONENTS
    #==========================================================

    pingResponse:
      type: object
      properties:
        message:
          type: string

    echoRequest:
      type: object
      properties:
        message:
          type: string

    #==========================================================
    #     MEDIA STORAGE COMPONENTS
    #==========================================================

    storeVideoRequest:
      type: object
      properties:
        file:
          type: string
          format: binary

    storeImageRequest:
      type: object
      properties:
        file:
          type: string
          format: binary

    getAllVideosResponse:
      type: object
      properties:
        videos:
          type: array
          items:
            $ref: '#/components/schemas/videoMetaData'

    getAllImagesResponse:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/imageMetaData'

    imageMetaData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        dateStored:
          type: string
          format: date-time
          description: The date-time notation as defined by RFC 3339, section 5.6. e.g. 2017-07-21T17:32:28Zring
        url:
          type: string

    videoMetaData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        dateStored:
          type: string
          format: date-time
          description: The date-time notation as defined by RFC 3339, section 5.6. e.g. 2017-07-21T17:32:28Z
        url:
          type: string
        thumbnail:
          type: string

    deleteVideoRequest:
      type: object
      properties:
        id:
          type: string
          description: unique id assossciated with a certain video stored on the blob storage

    deleteImageRequest:
      type: object
      properties:
        id:
          type: string
          description: unique id assossciated with a certain image stored on the blob storage

    getAnalyzedImagesResponse:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/analyzedImageMetaData'

    getAnalyzedVideosResponse:
      type: object
      properties:
        videos:
          type: array
          items:
            $ref: '#/components/schemas/analyzedVideoMetaData'

    analyzedImageMetaData:
      type: object
      properties:
        id:
          type: string
        dateAnalyzed:
          type: string
          format: date-time
          description: The date-time notation as defined by RFC 3339, section 5.6. e.g. 2017-07-21T17:32:28Zring
        url:
          type: string
        imageId:
          type: string
        pipelineId:
          type: string

    analyzedVideoMetaData:
      type: object
      properties:
        id:
          type: string
        dateAnalyzed:
          type: string
          format: date-time
          description: The date-time notation as defined by RFC 3339, section 5.6. e.g. 2017-07-21T17:32:28Zring
        url:
          type: string
        videoId:
          type: string
        pipelineId:
          type: string
        thumbnail:
          type: string

    #==========================================================
    #     PIPELINES COMPONENTS
    #==========================================================

    createPipelineRequest:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/newPipeline'

    createPipelineResponse:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/pipeline'

    getPipelinesResponse:
      type: object
      properties:
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/pipeline'

    newPipeline:
      type: object
      properties:
        name:
          type: string
        metadataType:
          type: string
        tools:
          type: array
          items:
            type: string
            description: All the tool id's stored as strings

    pipeline:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          description: Unique id associated with the pipeline
        metadataType:
          type: string
        tools:
          type: array
          items:
            type: string
            description: All the tool id's stored as strings

    addToolsRequest:
      type: object
      properties:
        pipelineId:
          type: string
        tools:
          type: array
          items:
            type: string

    removeToolsRequest:
      type: object
      properties:
        pipelineId:
          type: string
        tools:
          type: array
          items:
            type: string

    deletePipelineRequest:
      type: object
      properties:
        pipelineId:
          type: string

    getPipelineIdsResponse:
      type: object
      properties:
        pipelineIds:
          type: array
          items:
            type: string

    getPipelineRequest:
      type: object
      properties:
        pipelineId:
          type: string

    #==========================================================
    #     ANALYSIS COMPONENTS
    #==========================================================

    analyzeImageRequest:
      type: object
      properties:
        imageId:
          type: string
        pipelineId:
          type: string

    analyzeVideoRequest:
      type: object
      properties:
        videoId:
          type: string
        pipelineId:
          type: string

    analyzeMediaResponse:
      type: object
      properties:
        url:
          type: string

    getLiveAnalysisTokenResponse:
      type: object
      properties:
        token:
          type: string

    #==========================================================
    #     USER COMPONENTS
    #==========================================================

    getAllUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'

    user:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        id:
          type: string
        isAdmin:
          type: boolean

    userRequest:
      type: object
      properties:
        id:
          type: string
          description: user id

    isAdminResponse:
      type: object
      properties:
        isAdmin:
          type: boolean

    #==========================================================
    #     TOOLS COMPONENTS
    #==========================================================

    storeAnalysisToolRequest:
      type: object
      properties:
        sourceCode:
          type: string
          format: binary
        model:
          type: string
          format: binary
        metadataType:
          type: string
        toolName:
          type: string

    storeDrawingToolRequest:
      type: object
      properties:
        sourceCode:
          type: string
          format: binary
        metadataType:
          type: string
        toolName:
          type: string

    deleteToolRequest:
      type: object
      properties:
        toolType:
          type: string
          description: Analysis or Drawing
        toolId:
          type: string

    getAllToolsResponse:
      type: object
      properties:
        tools:
          type: array
          items:
            $ref: '#/components/schemas/tool'

    tool:
      type: object
      properties:
        toolId:
          type: string
        toolName:
          type: string
        toolType:
          type: string
          description: Analysis or drawing
        toolMetadataType:
          type: string
        isDefaultTool:
          type: boolean

    getToolTypesResponse:
      type: object
      properties:
        toolTypes:
          type: array
          items:
            type: string

    createToolMetaDataTypeRequest:
      type: object
      properties:
        name:
          type: string
        file:
          type: string
          format: binary

    getToolMetaDataTypes:
      type: object
      properties:
        metaDataTypes:
          type: array
          items:
            type: string
    
    getToolFilesRequest:
      type: object
      properties:
        toolType:
          type: string
          description: Must be "drawing" or "analysis"
        toolId:
          type: string
    
    getToolFilesResponse:
      type: object
      properties:
        toolSourceCode:
          $ref: '#/components/schemas/fileDownload'
        model:
          $ref: '#/components/schemas/fileDownload'
          description: Will be null if request type was drawing

    #==========================================================
    #     DOWNLOADS COMPONENTS
    #==========================================================

    fileDownload:
      type: object
      properties:
        fileUrl:
          type: string
          description: a download link to the file
    
    downloadSdkFilesResponse:
      type: object
      properties:
        sdkZip:
          $ref: '#/components/schemas/fileDownload'

    #==========================================================
    #     STREAMING COMPONENTS
    #==========================================================
    
    createOneTimeTokenRequest:
      type: object
      properties:
        streamingId:
          type: string
    
    #==========================================================
    #     GENERIC COMPONENTS
    #==========================================================

    emptyObject:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
